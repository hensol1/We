{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const fetchMatches = async date => {\n  try {\n    const response = await fetch(`${API_URL}/matches?date=${date}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching matches:', error);\n    throw error;\n  }\n};\nexport const submitVote = async (matchId, vote) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/vote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify({\n        matchId,\n        vote\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error submitting vote');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting vote:', error);\n    throw error;\n  }\n};\nexport const getMatchVotes = async matchId => {\n  try {\n    const response = await fetch(`${API_URL}/match-votes/${matchId}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching match votes:', error);\n    throw error;\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Login failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw error;\n  }\n};\nexport const register = async (username, password, country) => {\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        country\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Registration failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error registering:', error);\n    throw error;\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/profile`, {\n      headers: {\n        'Authorization': token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n};\nexport const getMatchDetails = async matchId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/match/${matchId}`, {\n      headers: {\n        'Authorization': token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch match details');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching match details:', error);\n    throw error;\n  }\n};\nexport const fetchAdminMatches = async date => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/admin/matches?date=${date}`, {\n      headers: {\n        'Authorization': token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch admin matches');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching admin matches:', error);\n    throw error;\n  }\n};\nexport const submitAdminPrediction = async (matchId, prediction) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/admin/predict`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify({\n        matchId,\n        prediction\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to submit admin prediction');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting admin prediction:', error);\n    throw error;\n  }\n};\nexport const getPredictionStats = async () => {\n  try {\n    const response = await fetch(`${API_URL}/prediction-stats`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch prediction statistics');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching prediction stats:', error);\n    throw error;\n  }\n};\nexport const resetPredictions = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${API_URL}/admin/reset-predictions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to reset predictions');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error resetting predictions:', error);\n    throw error;\n  }\n};\n\n// Remove the duplicate declaration at the end of the file\n// export const getMatchVotes = async\n\n//export const getMatchVotes = async","map":{"version":3,"names":["API_URL","fetchMatches","date","response","fetch","ok","Error","json","error","console","submitVote","matchId","vote","token","localStorage","getItem","method","headers","body","JSON","stringify","errorData","message","getMatchVotes","login","username","password","register","country","getUserProfile","getMatchDetails","fetchAdminMatches","submitAdminPrediction","prediction","getPredictionStats","resetPredictions"],"sources":["C:/Users/henso/Desktop/football-matches-dashboard/Frontend/src/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\r\n\r\nexport const fetchMatches = async (date) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/matches?date=${date}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching matches:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const submitVote = async (matchId, vote) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/vote`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token,\r\n      },\r\n      body: JSON.stringify({ matchId, vote }),\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Error submitting vote');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error submitting vote:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMatchVotes = async (matchId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/match-votes/${matchId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching match votes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Login failed');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error logging in:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (username, password, country) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password, country }),\r\n    });\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Registration failed');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error registering:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/profile`, {\r\n      headers: {\r\n        'Authorization': token,\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch user profile');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMatchDetails = async (matchId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/match/${matchId}`, {\r\n      headers: {\r\n        'Authorization': token,\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch match details');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching match details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const fetchAdminMatches = async (date) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/admin/matches?date=${date}`, {\r\n      headers: {\r\n        'Authorization': token,\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch admin matches');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching admin matches:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const submitAdminPrediction = async (matchId, prediction) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/admin/predict`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token,\r\n      },\r\n      body: JSON.stringify({ matchId, prediction }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to submit admin prediction');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error submitting admin prediction:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPredictionStats = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/prediction-stats`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch prediction statistics');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching prediction stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const resetPredictions = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${API_URL}/admin/reset-predictions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token,\r\n      },\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to reset predictions');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error resetting predictions:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Remove the duplicate declaration at the end of the file\r\n// export const getMatchVotes = async\r\n\r\n\r\n//export const getMatchVotes = async"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
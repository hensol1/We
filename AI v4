# We Know Better - Football Prediction Platform

## Project Overview
"We Know Better" is a web application for football (soccer) match predictions. It allows users to view upcoming matches, make predictions, and tracks the accuracy of both user (fans) and AI predictions.

## Tech Stack
- Frontend: React.js
- Backend: Node.js with Express.js
- Database: MongoDB
- Additional libraries: date-fns, bcrypt, jsonwebtoken, Heroicons

## Key Components

### Backend (server.js)
- Express server setup with MongoDB connection
- User and Match schemas defined using Mongoose
- API endpoints for user authentication, match fetching, voting, and admin functionalities
- JWT-based authentication middleware
- Prediction statistics calculation

### Frontend
1. App.js:
   - Main component handling routing and overall app structure
   - Manages user authentication state

2. MatchesDashboard.js:
   - Displays matches grouped by leagues
   - Allows users to vote on match outcomes
   - Implements date navigation to view matches for different dates

3. PredictionStats.js:
   - Displays aggregate prediction accuracy for fans and AI
   - Shows trends in prediction accuracy

4. AdminPanel.js (not detailed in recent updates):
   - Allows admins to view matches and make predictions
   - Implements date navigation similar to MatchesDashboard

5. Auth.js (not detailed in recent updates):
   - Handles user registration and login

## Recent Updates and Focus Areas

1. Prediction Statistics Calculation:
   - Implemented cumulative stats calculation for fans and AI predictions
   - Added trend calculation to show day-over-day changes in prediction accuracy

2. Date Handling:
   - Improved date range filtering for calculating stats for today and yesterday

3. Frontend Display:
   - Updated PredictionStats component to show percentages and trends
   - Implemented Heroicons for trend visualization

4. Debugging and Logging:
   - Added detailed logging in the backend to troubleshoot date filtering and match counting issues

## Current Challenges and Next Steps
- Ensuring accurate date filtering for prediction statistics
- Verifying that trends are calculated and displayed correctly
- Potentially updating the admin panel to reflect recent changes in prediction handling

## Data Structure Examples

### Match Schema:
```javascript
{
  id: String,
  awayTeam: { id: Number, name: String, crest: String },
  homeTeam: { id: Number, name: String, crest: String },
  competition: { id: Number, name: String, emblem: String },
  score: { winner: String, fullTime: { home: Number, away: Number } },
  status: String,
  utcDate: String,
  votes: { HOME: Number, DRAW: Number, AWAY: Number },
  adminPrediction: { team: String, logo: String, isCorrect: Boolean }
}
```

### Prediction Stats Response:
```javascript
{
  today: {
    userAccuracy: Number,
    adminAccuracy: Number,
    totalUserPredictions: Number,
    totalAdminPredictions: Number,
    userCorrectPredictions: Number,
    adminCorrectPredictions: Number
  },
  yesterday: { ... }, // Same structure as 'today'
  userTrend: Number,
  adminTrend: Number
}
```

The project is currently focused on refining the prediction statistics calculation and display, ensuring accurate representation of fan and AI prediction performance over time.
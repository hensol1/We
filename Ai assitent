Project Overview:
This is a web application that displays football matches, allows users to vote on match outcomes, and includes an admin panel for making official predictions. It consists of a React frontend and a Node.js/Express backend with MongoDB for data storage.
Project Structure:

football-matches-dashboard/
├── frontend/
│   ├── public/
│   └── src/
│       ├── components/
│       │   ├── App.js
│       │   ├── MatchesDashboard.js
│       │   ├── Auth.js
│       │   ├── Profile.js
│       │   └── AdminPanel.js
│       ├── api.js
│       ├── index.js
│       └── index.css
├── backend/
│   ├── server.js
│   └── .env
├── package.json
└── README.md


Frontend (React):

Key Components:
a. App.js: The main component that handles routing and overall app structure.
b. MatchesDashboard.js: Displays matches grouped by leagues, handles voting functionality, and shows fan predictions.
c. Auth.js: Manages user registration and login.
d. Profile.js: Displays user profile information and detailed voting history.
e. AdminPanel.js: Allows admin users to make predictions for matches.
Key Features:

Fetches and displays matches for a specific date
Allows date navigation
Displays match details including teams, scores, and voting buttons
Shows voting percentages for each match
Implements user authentication (login/register)
Provides an admin panel for match predictions
Displays user profiles with voting history and accuracy


Backend (Node.js/Express):

Key Endpoints:

GET /api/matches: Fetches matches for a specific date
POST /api/vote: Handles user voting on matches
GET /api/match-votes/:matchId: Retrieves voting percentages for a specific match
POST /api/register: Handles user registration
POST /api/login: Handles user login
GET /api/profile: Retrieves user profile information
GET /api/admin/matches: Fetches matches for admin prediction (filtered by selected leagues)
POST /api/admin/predict: Handles admin match predictions
GET /api/match/:matchId: Retrieves details for a specific match


Database (MongoDB):

Collections:

users: Stores user information (username, hashed password, isAdmin flag, voting history)
matches: Stores match information (teams, scores, voting data, admin predictions)


Key Functionalities:


User Registration and Login
Admin user support
Fetching and Displaying Matches (filtered by selected leagues)
Voting on Match Outcomes
Displaying Voting Percentages
User Profile with Detailed Voting History
Admin Panel for Match Predictions
Date Navigation for Matches and Admin Panel


Recent Updates:


Implemented admin panel for match predictions
Updated profile page to show detailed match information in voting history
Filtered admin panel matches to show only selected leagues
Added date navigation to admin panel


Current State:


Basic and advanced functionalities are implemented
User authentication with admin support is working
Match display, voting system, and admin predictions are functional
Profile page shows detailed voting history
Admin panel allows predictions for filtered matches


Next Steps / Potential Improvements:


Implement real-time updates for match scores and voting data
Enhance UI/UX design
Add more comprehensive error handling
Implement data visualization for voting trends
Add social features (e.g., sharing predictions, following other users)
Implement a ranking system based on prediction accuracy